Common subdirectories: ../gox-1.0.1/.git and ./.git
Common subdirectories: ../gox-1.0.1/.github and ./.github
diff -upN ../gox-1.0.1/.travis.yml ./.travis.yml
--- ../gox-1.0.1/.travis.yml	2019-04-10 23:02:03.000000000 +0800
+++ ./.travis.yml	1970-01-01 08:00:00.000000000 +0800
@@ -1,15 +0,0 @@
-language: go
-
-go:
-  - 1.6.x
-  - 1.7.x
-  - 1.8.x
-  - 1.9.x
-  - 1.10.x
-  - 1.11.x
-  - tip
-
-script:
-  - go test ./...
-
-go_import_path: github.com/mitchellh/gox
diff -upN ../gox-1.0.1/Gopkg.lock ./Gopkg.lock
--- ../gox-1.0.1/Gopkg.lock	2019-04-10 23:02:03.000000000 +0800
+++ ./Gopkg.lock	1970-01-01 08:00:00.000000000 +0800
@@ -1,15 +0,0 @@
-# This file is autogenerated, do not edit; changes may be undone by the next 'dep ensure'.
-
-
-[[projects]]
-  branch = "master"
-  name = "github.com/mitchellh/iochan"
-  packages = ["."]
-  revision = "87b45ffd0e9581375c491fef3d32130bb15c5bd7"
-
-[solve-meta]
-  analyzer-name = "dep"
-  analyzer-version = 1
-  inputs-digest = "d7653d046a1e4d3471559a7d216e5a479923b8a706d83a6464e582a851ef2b98"
-  solver-name = "gps-cdcl"
-  solver-version = 1
diff -upN ../gox-1.0.1/Gopkg.toml ./Gopkg.toml
--- ../gox-1.0.1/Gopkg.toml	2019-04-10 23:02:03.000000000 +0800
+++ ./Gopkg.toml	1970-01-01 08:00:00.000000000 +0800
@@ -1,26 +0,0 @@
-
-# Gopkg.toml example
-#
-# Refer to https://github.com/golang/dep/blob/master/docs/Gopkg.toml.md
-# for detailed Gopkg.toml documentation.
-#
-# required = ["github.com/user/thing/cmd/thing"]
-# ignored = ["github.com/user/project/pkgX", "bitbucket.org/user/project/pkgA/pkgY"]
-#
-# [[constraint]]
-#   name = "github.com/user/project"
-#   version = "1.0.0"
-#
-# [[constraint]]
-#   name = "github.com/user/project2"
-#   branch = "dev"
-#   source = "github.com/myfork/project2"
-#
-# [[override]]
-#  name = "github.com/x/y"
-#  version = "2.4.0"
-
-
-[[constraint]]
-  branch = "master"
-  name = "github.com/mitchellh/iochan"
diff -upN ../gox-1.0.1/README.md ./README.md
--- ../gox-1.0.1/README.md	2019-04-10 23:02:03.000000000 +0800
+++ ./README.md	2022-09-25 20:43:22.000000000 +0800
@@ -10,7 +10,7 @@ To install Gox, please use `go get`. We 
 checkout that tag and compile.
 
 ```
-$ go get github.com/mitchellh/gox
+$ go install github.com/mitchellh/gox@latest
 ...
 $ gox -h
 ...
diff -upN ../gox-1.0.1/go.go ./go.go
--- ../gox-1.0.1/go.go	2019-04-10 23:02:03.000000000 +0800
+++ ./go.go	2022-09-25 20:43:22.000000000 +0800
@@ -32,6 +32,7 @@ type CompileOpts struct {
 	Cgo         bool
 	Rebuild     bool
 	GoCmd       string
+	Race        bool
 }
 
 // GoCrossCompile
@@ -111,6 +112,9 @@ func GoCrossCompile(opts *CompileOpts) e
 	if opts.ModMode != "" {
 		args = append(args, "-mod", opts.ModMode)
 	}
+	if opts.Race {
+		args = append(args, "-race")
+	}
 	args = append(args,
 		"-gcflags", opts.Gcflags,
 		"-ldflags", opts.Ldflags,
diff -upN ../gox-1.0.1/go.mod ./go.mod
--- ../gox-1.0.1/go.mod	2019-04-10 23:02:03.000000000 +0800
+++ ./go.mod	2022-09-25 20:43:22.000000000 +0800
@@ -1,5 +1,7 @@
 module github.com/mitchellh/gox
 
+go 1.17
+
 require (
 	github.com/hashicorp/go-version v1.0.0
 	github.com/mitchellh/iochan v1.0.0
diff -upN ../gox-1.0.1/go.sum ./go.sum
--- ../gox-1.0.1/go.sum	2019-04-10 23:02:03.000000000 +0800
+++ ./go.sum	2022-09-25 20:43:22.000000000 +0800
@@ -1,6 +1,4 @@
 github.com/hashicorp/go-version v1.0.0 h1:21MVWPKDphxa7ineQQTrCU5brh7OuVVAzGOCnnCPtE8=
 github.com/hashicorp/go-version v1.0.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=
-github.com/mitchellh/iochan v0.0.0-20150529224432-87b45ffd0e95 h1:aHWVygBsLb+Kls/35B3tevL1hvDxZ0UklPA0BmhqTEk=
-github.com/mitchellh/iochan v0.0.0-20150529224432-87b45ffd0e95/go.mod h1:JwYml1nuB7xOzsp52dPpHFffvOCDupsG0QubkSMEySY=
 github.com/mitchellh/iochan v1.0.0 h1:C+X3KsSTLFVBr/tK1eYN/vs4rJcvsiLU338UhYPJWeY=
 github.com/mitchellh/iochan v1.0.0/go.mod h1:JwYml1nuB7xOzsp52dPpHFffvOCDupsG0QubkSMEySY=
diff -upN ../gox-1.0.1/go_test.go ./go_test.go
--- ../gox-1.0.1/go_test.go	2019-04-10 23:02:03.000000000 +0800
+++ ./go_test.go	2022-09-25 20:43:22.000000000 +0800
@@ -12,13 +12,26 @@ func TestGoVersion(t *testing.T) {
 	}
 
 	acceptable := []string{
-		"devel", "go1.0", "go1.1", "go1.2", "go1.3",
-		"go1.4", "go1.4.1", "go1.4.2", "go1.4.3",
-		"go1.5", "go1.5.1", "go1.5.2", "go1.5.3", "go1.5.4",
-		"go1.6", "go1.6.1", "go1.6.2", "go1.6.3", "go1.6.4",
-		"go1.7", "go1.7.1", "go1.7.2", "go1.7.3", "go1.7.4", "go1.7.5", "go1.7.6",
-		"go1.8", "go1.8.1", "go1.8.2", "go1.8.3", "go1.8.4",
-		"go1.9", "go1.9.1", "go1.9.2",
+		"devel",
+		"go1.0",
+		"go1.1",
+		"go1.2",
+		"go1.3",
+		"go1.4",
+		"go1.5",
+		"go1.6",
+		"go1.7",
+		"go1.8",
+		"go1.9",
+		"go1.10",
+		"go1.11",
+		"go1.12",
+		"go1.13",
+		"go1.14",
+		"go1.15",
+		"go1.16",
+		"go1.17",
+		"go1.18",
 	}
 	found := false
 	for _, expected := range acceptable {
diff -upN ../gox-1.0.1/gox-add-riscv.patch ./gox-add-riscv.patch
--- ../gox-1.0.1/gox-add-riscv.patch	1970-01-01 08:00:00.000000000 +0800
+++ ./gox-add-riscv.patch	2022-10-06 14:47:58.000000000 +0800
@@ -0,0 +1,161 @@
+Common subdirectories: ../gox-1.0.1/.git and ./.git
+Common subdirectories: ../gox-1.0.1/.github and ./.github
+diff -upN ../gox-1.0.1/.travis.yml ./.travis.yml
+--- ../gox-1.0.1/.travis.yml	2019-04-10 23:02:03.000000000 +0800
++++ ./.travis.yml	1970-01-01 08:00:00.000000000 +0800
+@@ -1,15 +0,0 @@
+-language: go
+-
+-go:
+-  - 1.6.x
+-  - 1.7.x
+-  - 1.8.x
+-  - 1.9.x
+-  - 1.10.x
+-  - 1.11.x
+-  - tip
+-
+-script:
+-  - go test ./...
+-
+-go_import_path: github.com/mitchellh/gox
+diff -upN ../gox-1.0.1/Gopkg.lock ./Gopkg.lock
+--- ../gox-1.0.1/Gopkg.lock	2019-04-10 23:02:03.000000000 +0800
++++ ./Gopkg.lock	1970-01-01 08:00:00.000000000 +0800
+@@ -1,15 +0,0 @@
+-# This file is autogenerated, do not edit; changes may be undone by the next 'dep ensure'.
+-
+-
+-[[projects]]
+-  branch = "master"
+-  name = "github.com/mitchellh/iochan"
+-  packages = ["."]
+-  revision = "87b45ffd0e9581375c491fef3d32130bb15c5bd7"
+-
+-[solve-meta]
+-  analyzer-name = "dep"
+-  analyzer-version = 1
+-  inputs-digest = "d7653d046a1e4d3471559a7d216e5a479923b8a706d83a6464e582a851ef2b98"
+-  solver-name = "gps-cdcl"
+-  solver-version = 1
+diff -upN ../gox-1.0.1/Gopkg.toml ./Gopkg.toml
+--- ../gox-1.0.1/Gopkg.toml	2019-04-10 23:02:03.000000000 +0800
++++ ./Gopkg.toml	1970-01-01 08:00:00.000000000 +0800
+@@ -1,26 +0,0 @@
+-
+-# Gopkg.toml example
+-#
+-# Refer to https://github.com/golang/dep/blob/master/docs/Gopkg.toml.md
+-# for detailed Gopkg.toml documentation.
+-#
+-# required = ["github.com/user/thing/cmd/thing"]
+-# ignored = ["github.com/user/project/pkgX", "bitbucket.org/user/project/pkgA/pkgY"]
+-#
+-# [[constraint]]
+-#   name = "github.com/user/project"
+-#   version = "1.0.0"
+-#
+-# [[constraint]]
+-#   name = "github.com/user/project2"
+-#   branch = "dev"
+-#   source = "github.com/myfork/project2"
+-#
+-# [[override]]
+-#  name = "github.com/x/y"
+-#  version = "2.4.0"
+-
+-
+-[[constraint]]
+-  branch = "master"
+-  name = "github.com/mitchellh/iochan"
+diff -upN ../gox-1.0.1/README.md ./README.md
+--- ../gox-1.0.1/README.md	2019-04-10 23:02:03.000000000 +0800
++++ ./README.md	2022-09-25 20:43:22.000000000 +0800
+@@ -10,7 +10,7 @@ To install Gox, please use `go get`. We 
+ checkout that tag and compile.
+ 
+ ```
+-$ go get github.com/mitchellh/gox
++$ go install github.com/mitchellh/gox@latest
+ ...
+ $ gox -h
+ ...
+diff -upN ../gox-1.0.1/go.go ./go.go
+--- ../gox-1.0.1/go.go	2019-04-10 23:02:03.000000000 +0800
++++ ./go.go	2022-09-25 20:43:22.000000000 +0800
+@@ -32,6 +32,7 @@ type CompileOpts struct {
+ 	Cgo         bool
+ 	Rebuild     bool
+ 	GoCmd       string
++	Race        bool
+ }
+ 
+ // GoCrossCompile
+@@ -111,6 +112,9 @@ func GoCrossCompile(opts *CompileOpts) e
+ 	if opts.ModMode != "" {
+ 		args = append(args, "-mod", opts.ModMode)
+ 	}
++	if opts.Race {
++		args = append(args, "-race")
++	}
+ 	args = append(args,
+ 		"-gcflags", opts.Gcflags,
+ 		"-ldflags", opts.Ldflags,
+diff -upN ../gox-1.0.1/go.mod ./go.mod
+--- ../gox-1.0.1/go.mod	2019-04-10 23:02:03.000000000 +0800
++++ ./go.mod	2022-09-25 20:43:22.000000000 +0800
+@@ -1,5 +1,7 @@
+ module github.com/mitchellh/gox
+ 
++go 1.17
++
+ require (
+ 	github.com/hashicorp/go-version v1.0.0
+ 	github.com/mitchellh/iochan v1.0.0
+diff -upN ../gox-1.0.1/go.sum ./go.sum
+--- ../gox-1.0.1/go.sum	2019-04-10 23:02:03.000000000 +0800
++++ ./go.sum	2022-09-25 20:43:22.000000000 +0800
+@@ -1,6 +1,4 @@
+ github.com/hashicorp/go-version v1.0.0 h1:21MVWPKDphxa7ineQQTrCU5brh7OuVVAzGOCnnCPtE8=
+ github.com/hashicorp/go-version v1.0.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=
+-github.com/mitchellh/iochan v0.0.0-20150529224432-87b45ffd0e95 h1:aHWVygBsLb+Kls/35B3tevL1hvDxZ0UklPA0BmhqTEk=
+-github.com/mitchellh/iochan v0.0.0-20150529224432-87b45ffd0e95/go.mod h1:JwYml1nuB7xOzsp52dPpHFffvOCDupsG0QubkSMEySY=
+ github.com/mitchellh/iochan v1.0.0 h1:C+X3KsSTLFVBr/tK1eYN/vs4rJcvsiLU338UhYPJWeY=
+ github.com/mitchellh/iochan v1.0.0/go.mod h1:JwYml1nuB7xOzsp52dPpHFffvOCDupsG0QubkSMEySY=
+diff -upN ../gox-1.0.1/go_test.go ./go_test.go
+--- ../gox-1.0.1/go_test.go	2019-04-10 23:02:03.000000000 +0800
++++ ./go_test.go	2022-09-25 20:43:22.000000000 +0800
+@@ -12,13 +12,26 @@ func TestGoVersion(t *testing.T) {
+ 	}
+ 
+ 	acceptable := []string{
+-		"devel", "go1.0", "go1.1", "go1.2", "go1.3",
+-		"go1.4", "go1.4.1", "go1.4.2", "go1.4.3",
+-		"go1.5", "go1.5.1", "go1.5.2", "go1.5.3", "go1.5.4",
+-		"go1.6", "go1.6.1", "go1.6.2", "go1.6.3", "go1.6.4",
+-		"go1.7", "go1.7.1", "go1.7.2", "go1.7.3", "go1.7.4", "go1.7.5", "go1.7.6",
+-		"go1.8", "go1.8.1", "go1.8.2", "go1.8.3", "go1.8.4",
+-		"go1.9", "go1.9.1", "go1.9.2",
++		"devel",
++		"go1.0",
++		"go1.1",
++		"go1.2",
++		"go1.3",
++		"go1.4",
++		"go1.5",
++		"go1.6",
++		"go1.7",
++		"go1.8",
++		"go1.9",
++		"go1.10",
++		"go1.11",
++		"go1.12",
++		"go1.13",
++		"go1.14",
++		"go1.15",
++		"go1.16",
++		"go1.17",
++		"go1.18",
+ 	}
+ 	found := false
+ 	for _, expected := range acceptable {
diff -upN ../gox-1.0.1/main.go ./main.go
--- ../gox-1.0.1/main.go	2019-04-10 23:02:03.000000000 +0800
+++ ./main.go	2022-09-25 20:43:22.000000000 +0800
@@ -27,7 +27,7 @@ func realMain() int {
 	var tags string
 	var verbose bool
 	var flagGcflags, flagAsmflags string
-	var flagCgo, flagRebuild, flagListOSArch bool
+	var flagCgo, flagRebuild, flagListOSArch, flagRaceFlag bool
 	var flagGoCmd string
 	var modMode string
 	flags := flag.NewFlagSet("gox", flag.ExitOnError)
@@ -44,6 +44,7 @@ func realMain() int {
 	flags.BoolVar(&flagCgo, "cgo", false, "")
 	flags.BoolVar(&flagRebuild, "rebuild", false, "")
 	flags.BoolVar(&flagListOSArch, "osarch-list", false, "")
+	flags.BoolVar(&flagRaceFlag, "race", false, "")
 	flags.StringVar(&flagGcflags, "gcflags", "", "")
 	flags.StringVar(&flagAsmflags, "asmflags", "", "")
 	flags.StringVar(&flagGoCmd, "gocmd", "go", "")
@@ -162,6 +163,7 @@ func realMain() int {
 					Cgo:         flagCgo,
 					Rebuild:     flagRebuild,
 					GoCmd:       flagGoCmd,
+					Race:        flagRaceFlag,
 				}
 
 				// Determine if we have specific CFLAGS or LDFLAGS for this
@@ -219,6 +221,7 @@ Options:
   -osarch-list        List supported os/arch pairs for your Go version
   -output="foo"       Output path template. See below for more info
   -parallel=-1        Amount of parallelism, defaults to number of CPUs
+  -race               Build with the go race detector enabled, requires CGO
   -gocmd="go"         Build command, defaults to Go
   -rebuild            Force rebuilding of package that were up to date
   -verbose            Verbose mode
diff -upN ../gox-1.0.1/platform.go ./platform.go
--- ../gox-1.0.1/platform.go	2019-04-10 23:02:03.000000000 +0800
+++ ./platform.go	2022-09-25 20:43:22.000000000 +0800
@@ -25,6 +25,36 @@ func (p *Platform) String() string {
 	return fmt.Sprintf("%s/%s", p.OS, p.Arch)
 }
 
+// addDrop appends all of the "add" entries and drops the "drop" entries, ignoring
+// the "Default" parameter.
+func addDrop(base []Platform, add []Platform, drop []Platform) []Platform {
+	newPlatforms := make([]Platform, len(base)+len(add))
+	copy(newPlatforms, base)
+	copy(newPlatforms[len(base):], add)
+
+	// slow, but we only do this during initialization at most once per version
+	for _, platform := range drop {
+		found := -1
+		for i := range newPlatforms {
+			if newPlatforms[i].Arch == platform.Arch && newPlatforms[i].OS == platform.OS {
+				found = i
+				break
+			}
+		}
+		if found < 0 {
+			panic(fmt.Sprintf("Expected to remove %+v but not found in list %+v", platform, newPlatforms))
+		}
+		if found == len(newPlatforms)-1 {
+			newPlatforms = newPlatforms[:found]
+		} else if found == 0 {
+			newPlatforms = newPlatforms[found:]
+		} else {
+			newPlatforms = append(newPlatforms[:found], newPlatforms[found+1:]...)
+		}
+	}
+	return newPlatforms
+}
+
 var (
 	Platforms_1_0 = []Platform{
 		{"darwin", "386", true},
@@ -40,64 +70,115 @@ var (
 		{"windows", "amd64", true},
 	}
 
-	Platforms_1_1 = append(Platforms_1_0, []Platform{
+	Platforms_1_1 = addDrop(Platforms_1_0, []Platform{
 		{"freebsd", "arm", true},
 		{"netbsd", "386", true},
 		{"netbsd", "amd64", true},
 		{"netbsd", "arm", true},
 		{"plan9", "386", false},
-	}...)
+	}, nil)
 
-	Platforms_1_3 = append(Platforms_1_1, []Platform{
+	Platforms_1_3 = addDrop(Platforms_1_1, []Platform{
 		{"dragonfly", "386", false},
 		{"dragonfly", "amd64", false},
 		{"nacl", "amd64", false},
 		{"nacl", "amd64p32", false},
 		{"nacl", "arm", false},
 		{"solaris", "amd64", false},
-	}...)
+	}, nil)
 
-	Platforms_1_4 = append(Platforms_1_3, []Platform{
+	Platforms_1_4 = addDrop(Platforms_1_3, []Platform{
 		{"android", "arm", false},
 		{"plan9", "amd64", false},
-	}...)
+	}, nil)
 
-	Platforms_1_5 = append(Platforms_1_4, []Platform{
+	Platforms_1_5 = addDrop(Platforms_1_4, []Platform{
 		{"darwin", "arm", false},
 		{"darwin", "arm64", false},
 		{"linux", "arm64", false},
 		{"linux", "ppc64", false},
 		{"linux", "ppc64le", false},
-	}...)
+	}, nil)
 
-	Platforms_1_6 = append(Platforms_1_5, []Platform{
+	Platforms_1_6 = addDrop(Platforms_1_5, []Platform{
 		{"android", "386", false},
+		{"android", "amd64", false},
 		{"linux", "mips64", false},
 		{"linux", "mips64le", false},
-	}...)
+		{"nacl", "386", false},
+		{"openbsd", "arm", true},
+	}, nil)
 
-	Platforms_1_7 = append(Platforms_1_5, []Platform{
+	Platforms_1_7 = addDrop(Platforms_1_5, []Platform{
 		// While not fully supported s390x is generally useful
 		{"linux", "s390x", true},
 		{"plan9", "arm", false},
 		// Add the 1.6 Platforms, but reflect full support for mips64 and mips64le
 		{"android", "386", false},
+		{"android", "amd64", false},
 		{"linux", "mips64", true},
 		{"linux", "mips64le", true},
-	}...)
+		{"nacl", "386", false},
+		{"openbsd", "arm", true},
+	}, nil)
 
-	Platforms_1_8 = append(Platforms_1_7, []Platform{
+	Platforms_1_8 = addDrop(Platforms_1_7, []Platform{
 		{"linux", "mips", true},
 		{"linux", "mipsle", true},
-	}...)
+	}, nil)
 
 	// no new platforms in 1.9
 	Platforms_1_9 = Platforms_1_8
 
-	// no new platforms in 1.10
-	Platforms_1_10 = Platforms_1_9
+	// unannounced, but dropped support for android/amd64
+	Platforms_1_10 = addDrop(Platforms_1_9, nil, []Platform{{"android", "amd64", false}})
+
+	Platforms_1_11 = addDrop(Platforms_1_10, []Platform{
+		{"js", "wasm", true},
+	}, nil)
+
+	Platforms_1_12 = addDrop(Platforms_1_11, []Platform{
+		{"aix", "ppc64", false},
+		{"windows", "arm", true},
+	}, nil)
+
+	Platforms_1_13 = addDrop(Platforms_1_12, []Platform{
+		{"illumos", "amd64", false},
+		{"netbsd", "arm64", true},
+		{"openbsd", "arm64", true},
+	}, nil)
+
+	Platforms_1_14 = addDrop(Platforms_1_13, []Platform{
+		{"freebsd", "arm64", true},
+		{"linux", "riscv64", true},
+	}, []Platform{
+		// drop nacl
+		{"nacl", "386", false},
+		{"nacl", "amd64", false},
+		{"nacl", "arm", false},
+	})
+
+	Platforms_1_15 = addDrop(Platforms_1_14, []Platform{
+		{"android", "arm64", false},
+	}, []Platform{
+		// drop i386 macos
+		{"darwin", "386", false},
+	})
+
+	Platforms_1_16 = addDrop(Platforms_1_15, []Platform{
+		{"android", "amd64", false},
+		{"darwin", "arm64", true},
+		{"openbsd", "mips64", false},
+	}, nil)
+
+	Platforms_1_17 = addDrop(Platforms_1_16, []Platform{
+		{"windows", "arm64", true},
+	}, nil)
+
+	// no new platforms in 1.18
+	Platforms_1_18 = Platforms_1_17
 
-	PlatformsLatest = Platforms_1_10
+	PlatformsLatest = Platforms_1_18
 )
 
 // SupportedPlatforms returns the full list of supported platforms for
@@ -131,7 +212,15 @@ func SupportedPlatforms(v string) []Plat
 		{">= 1.7, < 1.8", Platforms_1_7},
 		{">= 1.8, < 1.9", Platforms_1_8},
 		{">= 1.9, < 1.10", Platforms_1_9},
-		{">=1.10, < 1.11", Platforms_1_10},
+		{">= 1.10, < 1.11", Platforms_1_10},
+		{">= 1.11, < 1.12", Platforms_1_11},
+		{">= 1.12, < 1.13", Platforms_1_12},
+		{">= 1.13, < 1.14", Platforms_1_13},
+		{">= 1.14, < 1.15", Platforms_1_14},
+		{">= 1.15, < 1.16", Platforms_1_15},
+		{">= 1.16, < 1.17", Platforms_1_16},
+		{">= 1.17, < 1.18", Platforms_1_17},
+		{">= 1.18, < 1.19", Platforms_1_18},
 	}
 
 	for _, p := range platforms {
@@ -145,5 +234,5 @@ func SupportedPlatforms(v string) []Plat
 	}
 
 	// Assume latest
-	return Platforms_1_9
+	return PlatformsLatest
 }
diff -upN ../gox-1.0.1/platform_test.go ./platform_test.go
--- ../gox-1.0.1/platform_test.go	2019-04-10 23:02:03.000000000 +0800
+++ ./platform_test.go	2022-09-25 20:43:22.000000000 +0800
@@ -63,6 +63,55 @@ func TestSupportedPlatforms(t *testing.T
 		t.Fatalf("bad: %#v", ps)
 	}
 
+	ps = SupportedPlatforms("go1.10")
+	if !reflect.DeepEqual(ps, Platforms_1_10) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.11")
+	if !reflect.DeepEqual(ps, Platforms_1_11) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.12")
+	if !reflect.DeepEqual(ps, Platforms_1_12) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.13")
+	if !reflect.DeepEqual(ps, Platforms_1_13) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.14")
+	if !reflect.DeepEqual(ps, Platforms_1_14) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.15")
+	if !reflect.DeepEqual(ps, Platforms_1_15) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.16")
+	if !reflect.DeepEqual(ps, Platforms_1_16) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.17")
+	if !reflect.DeepEqual(ps, Platforms_1_17) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.18")
+	if !reflect.DeepEqual(ps, Platforms_1_18) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.10")
+	if !reflect.DeepEqual(ps, Platforms_1_10) {
+		t.Fatalf("bad: %#v", ps)
+	}
 	// Unknown
 	ps = SupportedPlatforms("foo")
 	if !reflect.DeepEqual(ps, PlatformsLatest) {
@@ -72,17 +121,30 @@ func TestSupportedPlatforms(t *testing.T
 
 func TestMIPS(t *testing.T) {
 	g16 := SupportedPlatforms("go1.6")
+	found := false
 	for _, p := range g16 {
-		if p.Arch == "mips64" && p.Default {
-			t.Fatal("mips64 should not be default for 1.6")
+		if p.OS == "linux" && p.Arch == "mips64" && !p.Default {
+			found = true
+		}
+		if p.OS == "linux" && p.Arch == "mips64" && p.Default {
+			t.Fatalf("mips64 should not be default for 1.6, but got %+v, %+v", p, g16)
 		}
 	}
+	if !found {
+		t.Fatal("Expected to find linux/mips64/false in go1.6 supported platforms")
+	}
+	found = false
 
 	g17 := SupportedPlatforms("go1.7")
 	for _, p := range g17 {
-		if p.Arch == "mips64" && !p.Default {
+		if p.OS == "linux" && p.Arch == "mips64" && p.Default {
+			found = true
+		}
+		if p.OS == "linux" && p.Arch == "mips64" && !p.Default {
 			t.Fatal("mips64 should be default for 1.7")
 		}
 	}
-
+	if !found {
+		t.Fatal("Expected to find linux/mips64/true in go1.7 supported platforms")
+	}
 }
Common subdirectories: ../gox-1.0.1/vendor and ./vendor
