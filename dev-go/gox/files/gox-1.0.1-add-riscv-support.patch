Common subdirectories: ../gox-1.0.1/.git and ./.git
Common subdirectories: ../gox-1.0.1/.github and ./.github
diff -upN ../gox-1.0.1/.travis.yml ./.travis.yml
--- ../gox-1.0.1/.travis.yml	2019-04-10 23:02:03.000000000 +0800
+++ ./.travis.yml	1970-01-01 08:00:00.000000000 +0800
@@ -1,15 +0,0 @@
-language: go
-
-go:
-  - 1.6.x
-  - 1.7.x
-  - 1.8.x
-  - 1.9.x
-  - 1.10.x
-  - 1.11.x
-  - tip
-
-script:
-  - go test ./...
-
-go_import_path: github.com/mitchellh/gox
diff -upN ../gox-1.0.1/Gopkg.lock ./Gopkg.lock
--- ../gox-1.0.1/Gopkg.lock	2019-04-10 23:02:03.000000000 +0800
+++ ./Gopkg.lock	1970-01-01 08:00:00.000000000 +0800
@@ -1,15 +0,0 @@
-# This file is autogenerated, do not edit; changes may be undone by the next 'dep ensure'.
-
-
-[[projects]]
-  branch = "master"
-  name = "github.com/mitchellh/iochan"
-  packages = ["."]
-  revision = "87b45ffd0e9581375c491fef3d32130bb15c5bd7"
-
-[solve-meta]
-  analyzer-name = "dep"
-  analyzer-version = 1
-  inputs-digest = "d7653d046a1e4d3471559a7d216e5a479923b8a706d83a6464e582a851ef2b98"
-  solver-name = "gps-cdcl"
-  solver-version = 1
diff -upN ../gox-1.0.1/Gopkg.toml ./Gopkg.toml
--- ../gox-1.0.1/Gopkg.toml	2019-04-10 23:02:03.000000000 +0800
+++ ./Gopkg.toml	1970-01-01 08:00:00.000000000 +0800
@@ -1,26 +0,0 @@
-
-# Gopkg.toml example
-#
-# Refer to https://github.com/golang/dep/blob/master/docs/Gopkg.toml.md
-# for detailed Gopkg.toml documentation.
-#
-# required = ["github.com/user/thing/cmd/thing"]
-# ignored = ["github.com/user/project/pkgX", "bitbucket.org/user/project/pkgA/pkgY"]
-#
-# [[constraint]]
-#   name = "github.com/user/project"
-#   version = "1.0.0"
-#
-# [[constraint]]
-#   name = "github.com/user/project2"
-#   branch = "dev"
-#   source = "github.com/myfork/project2"
-#
-# [[override]]
-#  name = "github.com/x/y"
-#  version = "2.4.0"
-
-
-[[constraint]]
-  branch = "master"
-  name = "github.com/mitchellh/iochan"
diff -upN ../gox-1.0.1/README.md ./README.md
--- ../gox-1.0.1/README.md	2019-04-10 23:02:03.000000000 +0800
+++ ./README.md	2022-09-25 20:43:22.000000000 +0800
@@ -10,7 +10,7 @@ To install Gox, please use `go get`. We 
 checkout that tag and compile.
 
 ```
-$ go get github.com/mitchellh/gox
+$ go install github.com/mitchellh/gox@latest
 ...
 $ gox -h
 ...
diff -upN ../gox-1.0.1/go.go ./go.go
--- ../gox-1.0.1/go.go	2019-04-10 23:02:03.000000000 +0800
+++ ./go.go	2022-09-25 20:43:22.000000000 +0800
@@ -32,6 +32,7 @@ type CompileOpts struct {
 	Cgo         bool
 	Rebuild     bool
 	GoCmd       string
+	Race        bool
 }
 
 // GoCrossCompile
@@ -111,6 +112,9 @@ func GoCrossCompile(opts *CompileOpts) e
 	if opts.ModMode != "" {
 		args = append(args, "-mod", opts.ModMode)
 	}
+	if opts.Race {
+		args = append(args, "-race")
+	}
 	args = append(args,
 		"-gcflags", opts.Gcflags,
 		"-ldflags", opts.Ldflags,
diff -upN ../gox-1.0.1/go.mod ./go.mod
--- ../gox-1.0.1/go.mod	2019-04-10 23:02:03.000000000 +0800
+++ ./go.mod	2022-09-25 20:43:22.000000000 +0800
@@ -1,5 +1,7 @@
 module github.com/mitchellh/gox
 
+go 1.17
+
 require (
 	github.com/hashicorp/go-version v1.0.0
 	github.com/mitchellh/iochan v1.0.0
diff -upN ../gox-1.0.1/go.sum ./go.sum
--- ../gox-1.0.1/go.sum	2019-04-10 23:02:03.000000000 +0800
+++ ./go.sum	2022-09-25 20:43:22.000000000 +0800
@@ -1,6 +1,4 @@
 github.com/hashicorp/go-version v1.0.0 h1:21MVWPKDphxa7ineQQTrCU5brh7OuVVAzGOCnnCPtE8=
 github.com/hashicorp/go-version v1.0.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=
-github.com/mitchellh/iochan v0.0.0-20150529224432-87b45ffd0e95 h1:aHWVygBsLb+Kls/35B3tevL1hvDxZ0UklPA0BmhqTEk=
-github.com/mitchellh/iochan v0.0.0-20150529224432-87b45ffd0e95/go.mod h1:JwYml1nuB7xOzsp52dPpHFffvOCDupsG0QubkSMEySY=
 github.com/mitchellh/iochan v1.0.0 h1:C+X3KsSTLFVBr/tK1eYN/vs4rJcvsiLU338UhYPJWeY=
 github.com/mitchellh/iochan v1.0.0/go.mod h1:JwYml1nuB7xOzsp52dPpHFffvOCDupsG0QubkSMEySY=
diff -upN ../gox-1.0.1/go_test.go ./go_test.go
--- ../gox-1.0.1/go_test.go	2019-04-10 23:02:03.000000000 +0800
+++ ./go_test.go	2022-09-25 20:43:22.000000000 +0800
@@ -12,13 +12,26 @@ func TestGoVersion(t *testing.T) {
 	}
 
 	acceptable := []string{
-		"devel", "go1.0", "go1.1", "go1.2", "go1.3",
-		"go1.4", "go1.4.1", "go1.4.2", "go1.4.3",
-		"go1.5", "go1.5.1", "go1.5.2", "go1.5.3", "go1.5.4",
-		"go1.6", "go1.6.1", "go1.6.2", "go1.6.3", "go1.6.4",
-		"go1.7", "go1.7.1", "go1.7.2", "go1.7.3", "go1.7.4", "go1.7.5", "go1.7.6",
-		"go1.8", "go1.8.1", "go1.8.2", "go1.8.3", "go1.8.4",
-		"go1.9", "go1.9.1", "go1.9.2",
+		"devel",
+		"go1.0",
+		"go1.1",
+		"go1.2",
+		"go1.3",
+		"go1.4",
+		"go1.5",
+		"go1.6",
+		"go1.7",
+		"go1.8",
+		"go1.9",
+		"go1.10",
+		"go1.11",
+		"go1.12",
+		"go1.13",
+		"go1.14",
+		"go1.15",
+		"go1.16",
+		"go1.17",
+		"go1.18",
 	}
 	found := false
 	for _, expected := range acceptable {
diff -upN ../gox-1.0.1/gox-add-riscv.patch ./gox-add-riscv.patch
--- ../gox-1.0.1/gox-add-riscv.patch	1970-01-01 08:00:00.000000000 +0800
+++ ./gox-add-riscv.patch	2022-10-06 14:47:58.000000000 +0800
@@ -0,0 +1,161 @@
+Common subdirectories: ../gox-1.0.1/.git and ./.git
+Common subdirectories: ../gox-1.0.1/.github and ./.github
+diff -upN ../gox-1.0.1/.travis.yml ./.travis.yml
+--- ../gox-1.0.1/.travis.yml	2019-04-10 23:02:03.000000000 +0800
++++ ./.travis.yml	1970-01-01 08:00:00.000000000 +0800
+@@ -1,15 +0,0 @@
+-language: go
+-
+-go:
+-  - 1.6.x
+-  - 1.7.x
+-  - 1.8.x
+-  - 1.9.x
+-  - 1.10.x
+-  - 1.11.x
+-  - tip
+-
+-script:
+-  - go test ./...
+-
+-go_import_path: github.com/mitchellh/gox
+diff -upN ../gox-1.0.1/Gopkg.lock ./Gopkg.lock
+--- ../gox-1.0.1/Gopkg.lock	2019-04-10 23:02:03.000000000 +0800
++++ ./Gopkg.lock	1970-01-01 08:00:00.000000000 +0800
+@@ -1,15 +0,0 @@
+-# This file is autogenerated, do not edit; changes may be undone by the next 'dep ensure'.
+-
+-
+-[[projects]]
+-  branch = "master"
+-  name = "github.com/mitchellh/iochan"
+-  packages = ["."]
+-  revision = "87b45ffd0e9581375c491fef3d32130bb15c5bd7"
+-
+-[solve-meta]
+-  analyzer-name = "dep"
+-  analyzer-version = 1
+-  inputs-digest = "d7653d046a1e4d3471559a7d216e5a479923b8a706d83a6464e582a851ef2b98"
+-  solver-name = "gps-cdcl"
+-  solver-version = 1
+diff -upN ../gox-1.0.1/Gopkg.toml ./Gopkg.toml
+--- ../gox-1.0.1/Gopkg.toml	2019-04-10 23:02:03.000000000 +0800
++++ ./Gopkg.toml	1970-01-01 08:00:00.000000000 +0800
+@@ -1,26 +0,0 @@
+-
+-# Gopkg.toml example
+-#
+-# Refer to https://github.com/golang/dep/blob/master/docs/Gopkg.toml.md
+-# for detailed Gopkg.toml documentation.
+-#
+-# required = ["github.com/user/thing/cmd/thing"]
+-# ignored = ["github.com/user/project/pkgX", "bitbucket.org/user/project/pkgA/pkgY"]
+-#
+-# [[constraint]]
+-#   name = "github.com/user/project"
+-#   version = "1.0.0"
+-#
+-# [[constraint]]
+-#   name = "github.com/user/project2"
+-#   branch = "dev"
+-#   source = "github.com/myfork/project2"
+-#
+-# [[override]]
+-#  name = "github.com/x/y"
+-#  version = "2.4.0"
+-
+-
+-[[constraint]]
+-  branch = "master"
+-  name = "github.com/mitchellh/iochan"
+diff -upN ../gox-1.0.1/README.md ./README.md
+--- ../gox-1.0.1/README.md	2019-04-10 23:02:03.000000000 +0800
++++ ./README.md	2022-09-25 20:43:22.000000000 +0800
+@@ -10,7 +10,7 @@ To install Gox, please use `go get`. We 
+ checkout that tag and compile.
+ 
+ ```
+-$ go get github.com/mitchellh/gox
++$ go install github.com/mitchellh/gox@latest
+ ...
+ $ gox -h
+ ...
+diff -upN ../gox-1.0.1/go.go ./go.go
+--- ../gox-1.0.1/go.go	2019-04-10 23:02:03.000000000 +0800
++++ ./go.go	2022-09-25 20:43:22.000000000 +0800
+@@ -32,6 +32,7 @@ type CompileOpts struct {
+ 	Cgo         bool
+ 	Rebuild     bool
+ 	GoCmd       string
++	Race        bool
+ }
+ 
+ // GoCrossCompile
+@@ -111,6 +112,9 @@ func GoCrossCompile(opts *CompileOpts) e
+ 	if opts.ModMode != "" {
+ 		args = append(args, "-mod", opts.ModMode)
+ 	}
++	if opts.Race {
++		args = append(args, "-race")
++	}
+ 	args = append(args,
+ 		"-gcflags", opts.Gcflags,
+ 		"-ldflags", opts.Ldflags,
+diff -upN ../gox-1.0.1/go.mod ./go.mod
+--- ../gox-1.0.1/go.mod	2019-04-10 23:02:03.000000000 +0800
++++ ./go.mod	2022-09-25 20:43:22.000000000 +0800
+@@ -1,5 +1,7 @@
+ module github.com/mitchellh/gox
+ 
++go 1.17
++
+ require (
+ 	github.com/hashicorp/go-version v1.0.0
+ 	github.com/mitchellh/iochan v1.0.0
+diff -upN ../gox-1.0.1/go.sum ./go.sum
+--- ../gox-1.0.1/go.sum	2019-04-10 23:02:03.000000000 +0800
++++ ./go.sum	2022-09-25 20:43:22.000000000 +0800
+@@ -1,6 +1,4 @@
+ github.com/hashicorp/go-version v1.0.0 h1:21MVWPKDphxa7ineQQTrCU5brh7OuVVAzGOCnnCPtE8=
+ github.com/hashicorp/go-version v1.0.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=
+-github.com/mitchellh/iochan v0.0.0-20150529224432-87b45ffd0e95 h1:aHWVygBsLb+Kls/35B3tevL1hvDxZ0UklPA0BmhqTEk=
+-github.com/mitchellh/iochan v0.0.0-20150529224432-87b45ffd0e95/go.mod h1:JwYml1nuB7xOzsp52dPpHFffvOCDupsG0QubkSMEySY=
+ github.com/mitchellh/iochan v1.0.0 h1:C+X3KsSTLFVBr/tK1eYN/vs4rJcvsiLU338UhYPJWeY=
+ github.com/mitchellh/iochan v1.0.0/go.mod h1:JwYml1nuB7xOzsp52dPpHFffvOCDupsG0QubkSMEySY=
+diff -upN ../gox-1.0.1/go_test.go ./go_test.go
+--- ../gox-1.0.1/go_test.go	2019-04-10 23:02:03.000000000 +0800
++++ ./go_test.go	2022-09-25 20:43:22.000000000 +0800
+@@ -12,13 +12,26 @@ func TestGoVersion(t *testing.T) {
+ 	}
+ 
+ 	acceptable := []string{
+-		"devel", "go1.0", "go1.1", "go1.2", "go1.3",
+-		"go1.4", "go1.4.1", "go1.4.2", "go1.4.3",
+-		"go1.5", "go1.5.1", "go1.5.2", "go1.5.3", "go1.5.4",
+-		"go1.6", "go1.6.1", "go1.6.2", "go1.6.3", "go1.6.4",
+-		"go1.7", "go1.7.1", "go1.7.2", "go1.7.3", "go1.7.4", "go1.7.5", "go1.7.6",
+-		"go1.8", "go1.8.1", "go1.8.2", "go1.8.3", "go1.8.4",
+-		"go1.9", "go1.9.1", "go1.9.2",
++		"devel",
++		"go1.0",
++		"go1.1",
++		"go1.2",
++		"go1.3",
++		"go1.4",
++		"go1.5",
++		"go1.6",
++		"go1.7",
++		"go1.8",
++		"go1.9",
++		"go1.10",
++		"go1.11",
++		"go1.12",
++		"go1.13",
++		"go1.14",
++		"go1.15",
++		"go1.16",
++		"go1.17",
++		"go1.18",
+ 	}
+ 	found := false
+ 	for _, expected := range acceptable {
diff -upN ../gox-1.0.1/main.go ./main.go
--- ../gox-1.0.1/main.go	2019-04-10 23:02:03.000000000 +0800
+++ ./main.go	2022-09-25 20:43:22.000000000 +0800
@@ -27,7 +27,7 @@ func realMain() int {
 	var tags string
 	var verbose bool
 	var flagGcflags, flagAsmflags string
-	var flagCgo, flagRebuild, flagListOSArch bool
+	var flagCgo, flagRebuild, flagListOSArch, flagRaceFlag bool
 	var flagGoCmd string
 	var modMode string
 	flags := flag.NewFlagSet("gox", flag.ExitOnError)
@@ -44,6 +44,7 @@ func realMain() int {
 	flags.BoolVar(&flagCgo, "cgo", false, "")
 	flags.BoolVar(&flagRebuild, "rebuild", false, "")
 	flags.BoolVar(&flagListOSArch, "osarch-list", false, "")
+	flags.BoolVar(&flagRaceFlag, "race", false, "")
 	flags.StringVar(&flagGcflags, "gcflags", "", "")
 	flags.StringVar(&flagAsmflags, "asmflags", "", "")
 	flags.StringVar(&flagGoCmd, "gocmd", "go", "")
@@ -162,6 +163,7 @@ func realMain() int {
 					Cgo:         flagCgo,
 					Rebuild:     flagRebuild,
 					GoCmd:       flagGoCmd,
+					Race:        flagRaceFlag,
 				}
 
 				// Determine if we have specific CFLAGS or LDFLAGS for this
@@ -219,6 +221,7 @@ Options:
   -osarch-list        List supported os/arch pairs for your Go version
   -output="foo"       Output path template. See below for more info
   -parallel=-1        Amount of parallelism, defaults to number of CPUs
+  -race               Build with the go race detector enabled, requires CGO
   -gocmd="go"         Build command, defaults to Go
   -rebuild            Force rebuilding of package that were up to date
   -verbose            Verbose mode
diff -upN ../gox-1.0.1/platform.go ./platform.go
--- ../gox-1.0.1/platform.go	2019-04-10 23:02:03.000000000 +0800
+++ ./platform.go	2022-09-25 20:43:22.000000000 +0800
@@ -25,6 +25,36 @@ func (p *Platform) String() string {
 	return fmt.Sprintf("%s/%s", p.OS, p.Arch)
 }
 
+// addDrop appends all of the "add" entries and drops the "drop" entries, ignoring
+// the "Default" parameter.
+func addDrop(base []Platform, add []Platform, drop []Platform) []Platform {
+	newPlatforms := make([]Platform, len(base)+len(add))
+	copy(newPlatforms, base)
+	copy(newPlatforms[len(base):], add)
+
+	// slow, but we only do this during initialization at most once per version
+	for _, platform := range drop {
+		found := -1
+		for i := range newPlatforms {
+			if newPlatforms[i].Arch == platform.Arch && newPlatforms[i].OS == platform.OS {
+				found = i
+				break
+			}
+		}
+		if found < 0 {
+			panic(fmt.Sprintf("Expected to remove %+v but not found in list %+v", platform, newPlatforms))
+		}
+		if found == len(newPlatforms)-1 {
+			newPlatforms = newPlatforms[:found]
+		} else if found == 0 {
+			newPlatforms = newPlatforms[found:]
+		} else {
+			newPlatforms = append(newPlatforms[:found], newPlatforms[found+1:]...)
+		}
+	}
+	return newPlatforms
+}
+
 var (
 	Platforms_1_0 = []Platform{
 		{"darwin", "386", true},
@@ -40,64 +70,115 @@ var (
 		{"windows", "amd64", true},
 	}
 
-	Platforms_1_1 = append(Platforms_1_0, []Platform{
+	Platforms_1_1 = addDrop(Platforms_1_0, []Platform{
 		{"freebsd", "arm", true},
 		{"netbsd", "386", true},
 		{"netbsd", "amd64", true},
 		{"netbsd", "arm", true},
 		{"plan9", "386", false},
-	}...)
+	}, nil)
 
-	Platforms_1_3 = append(Platforms_1_1, []Platform{
+	Platforms_1_3 = addDrop(Platforms_1_1, []Platform{
 		{"dragonfly", "386", false},
 		{"dragonfly", "amd64", false},
 		{"nacl", "amd64", false},
 		{"nacl", "amd64p32", false},
 		{"nacl", "arm", false},
 		{"solaris", "amd64", false},
-	}...)
+	}, nil)
 
-	Platforms_1_4 = append(Platforms_1_3, []Platform{
+	Platforms_1_4 = addDrop(Platforms_1_3, []Platform{
 		{"android", "arm", false},
 		{"plan9", "amd64", false},
-	}...)
+	}, nil)
 
-	Platforms_1_5 = append(Platforms_1_4, []Platform{
+	Platforms_1_5 = addDrop(Platforms_1_4, []Platform{
 		{"darwin", "arm", false},
 		{"darwin", "arm64", false},
 		{"linux", "arm64", false},
 		{"linux", "ppc64", false},
 		{"linux", "ppc64le", false},
-	}...)
+	}, nil)
 
-	Platforms_1_6 = append(Platforms_1_5, []Platform{
+	Platforms_1_6 = addDrop(Platforms_1_5, []Platform{
 		{"android", "386", false},
+		{"android", "amd64", false},
 		{"linux", "mips64", false},
 		{"linux", "mips64le", false},
-	}...)
+		{"nacl", "386", false},
+		{"openbsd", "arm", true},
+	}, nil)
 
-	Platforms_1_7 = append(Platforms_1_5, []Platform{
+	Platforms_1_7 = addDrop(Platforms_1_5, []Platform{
 		// While not fully supported s390x is generally useful
 		{"linux", "s390x", true},
 		{"plan9", "arm", false},
 		// Add the 1.6 Platforms, but reflect full support for mips64 and mips64le
 		{"android", "386", false},
+		{"android", "amd64", false},
 		{"linux", "mips64", true},
 		{"linux", "mips64le", true},
-	}...)
+		{"nacl", "386", false},
+		{"openbsd", "arm", true},
+	}, nil)
 
-	Platforms_1_8 = append(Platforms_1_7, []Platform{
+	Platforms_1_8 = addDrop(Platforms_1_7, []Platform{
 		{"linux", "mips", true},
 		{"linux", "mipsle", true},
-	}...)
+	}, nil)
 
 	// no new platforms in 1.9
 	Platforms_1_9 = Platforms_1_8
 
-	// no new platforms in 1.10
-	Platforms_1_10 = Platforms_1_9
+	// unannounced, but dropped support for android/amd64
+	Platforms_1_10 = addDrop(Platforms_1_9, nil, []Platform{{"android", "amd64", false}})
+
+	Platforms_1_11 = addDrop(Platforms_1_10, []Platform{
+		{"js", "wasm", true},
+	}, nil)
+
+	Platforms_1_12 = addDrop(Platforms_1_11, []Platform{
+		{"aix", "ppc64", false},
+		{"windows", "arm", true},
+	}, nil)
+
+	Platforms_1_13 = addDrop(Platforms_1_12, []Platform{
+		{"illumos", "amd64", false},
+		{"netbsd", "arm64", true},
+		{"openbsd", "arm64", true},
+	}, nil)
+
+	Platforms_1_14 = addDrop(Platforms_1_13, []Platform{
+		{"freebsd", "arm64", true},
+		{"linux", "riscv64", true},
+	}, []Platform{
+		// drop nacl
+		{"nacl", "386", false},
+		{"nacl", "amd64", false},
+		{"nacl", "arm", false},
+	})
+
+	Platforms_1_15 = addDrop(Platforms_1_14, []Platform{
+		{"android", "arm64", false},
+	}, []Platform{
+		// drop i386 macos
+		{"darwin", "386", false},
+	})
+
+	Platforms_1_16 = addDrop(Platforms_1_15, []Platform{
+		{"android", "amd64", false},
+		{"darwin", "arm64", true},
+		{"openbsd", "mips64", false},
+	}, nil)
+
+	Platforms_1_17 = addDrop(Platforms_1_16, []Platform{
+		{"windows", "arm64", true},
+	}, nil)
+
+	// no new platforms in 1.18
+	Platforms_1_18 = Platforms_1_17
 
-	PlatformsLatest = Platforms_1_10
+	PlatformsLatest = Platforms_1_18
 )
 
 // SupportedPlatforms returns the full list of supported platforms for
@@ -131,7 +212,15 @@ func SupportedPlatforms(v string) []Plat
 		{">= 1.7, < 1.8", Platforms_1_7},
 		{">= 1.8, < 1.9", Platforms_1_8},
 		{">= 1.9, < 1.10", Platforms_1_9},
-		{">=1.10, < 1.11", Platforms_1_10},
+		{">= 1.10, < 1.11", Platforms_1_10},
+		{">= 1.11, < 1.12", Platforms_1_11},
+		{">= 1.12, < 1.13", Platforms_1_12},
+		{">= 1.13, < 1.14", Platforms_1_13},
+		{">= 1.14, < 1.15", Platforms_1_14},
+		{">= 1.15, < 1.16", Platforms_1_15},
+		{">= 1.16, < 1.17", Platforms_1_16},
+		{">= 1.17, < 1.18", Platforms_1_17},
+		{">= 1.18, < 1.19", Platforms_1_18},
 	}
 
 	for _, p := range platforms {
@@ -145,5 +234,5 @@ func SupportedPlatforms(v string) []Plat
 	}
 
 	// Assume latest
-	return Platforms_1_9
+	return PlatformsLatest
 }
diff -upN ../gox-1.0.1/platform_test.go ./platform_test.go
--- ../gox-1.0.1/platform_test.go	2019-04-10 23:02:03.000000000 +0800
+++ ./platform_test.go	2022-09-25 20:43:22.000000000 +0800
@@ -63,6 +63,55 @@ func TestSupportedPlatforms(t *testing.T
 		t.Fatalf("bad: %#v", ps)
 	}
 
+	ps = SupportedPlatforms("go1.10")
+	if !reflect.DeepEqual(ps, Platforms_1_10) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.11")
+	if !reflect.DeepEqual(ps, Platforms_1_11) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.12")
+	if !reflect.DeepEqual(ps, Platforms_1_12) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.13")
+	if !reflect.DeepEqual(ps, Platforms_1_13) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.14")
+	if !reflect.DeepEqual(ps, Platforms_1_14) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.15")
+	if !reflect.DeepEqual(ps, Platforms_1_15) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.16")
+	if !reflect.DeepEqual(ps, Platforms_1_16) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.17")
+	if !reflect.DeepEqual(ps, Platforms_1_17) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.18")
+	if !reflect.DeepEqual(ps, Platforms_1_18) {
+		t.Fatalf("bad: %#v", ps)
+	}
+
+	ps = SupportedPlatforms("go1.10")
+	if !reflect.DeepEqual(ps, Platforms_1_10) {
+		t.Fatalf("bad: %#v", ps)
+	}
 	// Unknown
 	ps = SupportedPlatforms("foo")
 	if !reflect.DeepEqual(ps, PlatformsLatest) {
@@ -72,17 +121,30 @@ func TestSupportedPlatforms(t *testing.T
 
 func TestMIPS(t *testing.T) {
 	g16 := SupportedPlatforms("go1.6")
+	found := false
 	for _, p := range g16 {
-		if p.Arch == "mips64" && p.Default {
-			t.Fatal("mips64 should not be default for 1.6")
+		if p.OS == "linux" && p.Arch == "mips64" && !p.Default {
+			found = true
+		}
+		if p.OS == "linux" && p.Arch == "mips64" && p.Default {
+			t.Fatalf("mips64 should not be default for 1.6, but got %+v, %+v", p, g16)
 		}
 	}
+	if !found {
+		t.Fatal("Expected to find linux/mips64/false in go1.6 supported platforms")
+	}
+	found = false
 
 	g17 := SupportedPlatforms("go1.7")
 	for _, p := range g17 {
-		if p.Arch == "mips64" && !p.Default {
+		if p.OS == "linux" && p.Arch == "mips64" && p.Default {
+			found = true
+		}
+		if p.OS == "linux" && p.Arch == "mips64" && !p.Default {
 			t.Fatal("mips64 should be default for 1.7")
 		}
 	}
-
+	if !found {
+		t.Fatal("Expected to find linux/mips64/true in go1.7 supported platforms")
+	}
 }
Common subdirectories: ../gox-1.0.1/vendor and ./vendor
diff -upNr ../gox-1.0.1/vendor/github.com/hashicorp/go-version/.travis.yml vendor/github.com/hashicorp/go-version/.travis.yml
--- ../gox-1.0.1/vendor/github.com/hashicorp/go-version/.travis.yml	1970-01-01 08:00:00.000000000 +0800
+++ vendor/github.com/hashicorp/go-version/.travis.yml	2022-10-06 15:56:59.000000000 +0800
@@ -0,0 +1,13 @@
+language: go
+
+go:
+  - 1.0
+  - 1.1
+  - 1.2
+  - 1.3
+  - 1.4
+  - 1.9
+  - "1.10"
+
+script:
+  - go test
diff -upNr ../gox-1.0.1/vendor/github.com/hashicorp/go-version/constraint.go vendor/github.com/hashicorp/go-version/constraint.go
--- ../gox-1.0.1/vendor/github.com/hashicorp/go-version/constraint.go	2019-04-10 23:02:03.000000000 +0800
+++ vendor/github.com/hashicorp/go-version/constraint.go	2022-10-06 15:56:59.000000000 +0800
@@ -2,6 +2,7 @@ package version

 import (
 	"fmt"
+	"reflect"
 	"regexp"
 	"strings"
 )
@@ -113,6 +114,26 @@ func parseSingle(v string) (*Constraint,
 	}, nil
 }

+func prereleaseCheck(v, c *Version) bool {
+	switch vPre, cPre := v.Prerelease() != "", c.Prerelease() != ""; {
+	case cPre && vPre:
+		// A constraint with a pre-release can only match a pre-release version
+		// with the same base segments.
+		return reflect.DeepEqual(c.Segments64(), v.Segments64())
+
+	case !cPre && vPre:
+		// A constraint without a pre-release can only match a version without a
+		// pre-release.
+		return false
+
+	case cPre && !vPre:
+		// OK, except with the pessimistic operator
+	case !cPre && !vPre:
+		// OK
+	}
+	return true
+}
+
 //-------------------------------------------------------------------
 // Constraint functions
 //-------------------------------------------------------------------
@@ -126,22 +147,27 @@ func constraintNotEqual(v, c *Version) b
 }

 func constraintGreaterThan(v, c *Version) bool {
-	return v.Compare(c) == 1
+	return prereleaseCheck(v, c) && v.Compare(c) == 1
 }

 func constraintLessThan(v, c *Version) bool {
-	return v.Compare(c) == -1
+	return prereleaseCheck(v, c) && v.Compare(c) == -1
 }

 func constraintGreaterThanEqual(v, c *Version) bool {
-	return v.Compare(c) >= 0
+	return prereleaseCheck(v, c) && v.Compare(c) >= 0
 }

 func constraintLessThanEqual(v, c *Version) bool {
-	return v.Compare(c) <= 0
+	return prereleaseCheck(v, c) && v.Compare(c) <= 0
 }

 func constraintPessimistic(v, c *Version) bool {
+	// Using a pessimistic constraint with a pre-release, restricts versions to pre-releases
+	if !prereleaseCheck(v, c) || (c.Prerelease() != "" && v.Prerelease() == "") {
+		return false
+	}
+
 	// If the version being checked is naturally less than the constraint, then there
 	// is no way for the version to be valid against the constraint
 	if v.LessThan(c) {
diff -upNr ../gox-1.0.1/vendor/github.com/hashicorp/go-version/constraint_test.go vendor/github.com/hashicorp/go-version/constraint_test.go
--- ../gox-1.0.1/vendor/github.com/hashicorp/go-version/constraint_test.go	2019-04-10 23:02:03.000000000 +0800
+++ vendor/github.com/hashicorp/go-version/constraint_test.go	1970-01-01 08:00:00.000000000 +0800
@@ -1,113 +0,0 @@
-package version
-
-import (
-	"testing"
-)
-
-func TestNewConstraint(t *testing.T) {
-	cases := []struct {
-		input string
-		count int
-		err   bool
-	}{
-		{">= 1.2", 1, false},
-		{"1.0", 1, false},
-		{">= 1.x", 0, true},
-		{">= 1.2, < 1.0", 2, false},
-
-		// Out of bounds
-		{"11387778780781445675529500000000000000000", 0, true},
-	}
-
-	for _, tc := range cases {
-		v, err := NewConstraint(tc.input)
-		if tc.err && err == nil {
-			t.Fatalf("expected error for input: %s", tc.input)
-		} else if !tc.err && err != nil {
-			t.Fatalf("error for input %s: %s", tc.input, err)
-		}
-
-		if len(v) != tc.count {
-			t.Fatalf("input: %s\nexpected len: %d\nactual: %d",
-				tc.input, tc.count, len(v))
-		}
-	}
-}
-
-func TestConstraintCheck(t *testing.T) {
-	cases := []struct {
-		constraint string
-		version    string
-		check      bool
-	}{
-		{">= 1.0, < 1.2", "1.1.5", true},
-		{"< 1.0, < 1.2", "1.1.5", false},
-		{"= 1.0", "1.1.5", false},
-		{"= 1.0", "1.0.0", true},
-		{"1.0", "1.0.0", true},
-		{"~> 1.0", "2.0", false},
-		{"~> 1.0", "1.1", true},
-		{"~> 1.0", "1.2.3", true},
-		{"~> 1.0.0", "1.2.3", false},
-		{"~> 1.0.0", "1.0.7", true},
-		{"~> 1.0.0", "1.1.0", false},
-		{"~> 1.0.7", "1.0.4", false},
-		{"~> 1.0.7", "1.0.7", true},
-		{"~> 1.0.7", "1.0.8", true},
-		{"~> 1.0.7", "1.0.7.5", true},
-		{"~> 1.0.7", "1.0.6.99", false},
-		{"~> 1.0.7", "1.0.8.0", true},
-		{"~> 1.0.9.5", "1.0.9.5", true},
-		{"~> 1.0.9.5", "1.0.9.4", false},
-		{"~> 1.0.9.5", "1.0.9.6", true},
-		{"~> 1.0.9.5", "1.0.9.5.0", true},
-		{"~> 1.0.9.5", "1.0.9.5.1", true},
-	}
-
-	for _, tc := range cases {
-		c, err := NewConstraint(tc.constraint)
-		if err != nil {
-			t.Fatalf("err: %s", err)
-		}
-
-		v, err := NewVersion(tc.version)
-		if err != nil {
-			t.Fatalf("err: %s", err)
-		}
-
-		actual := c.Check(v)
-		expected := tc.check
-		if actual != expected {
-			t.Fatalf("Version: %s\nConstraint: %s\nExpected: %#v",
-				tc.version, tc.constraint, expected)
-		}
-	}
-}
-
-func TestConstraintsString(t *testing.T) {
-	cases := []struct {
-		constraint string
-		result     string
-	}{
-		{">= 1.0, < 1.2", ""},
-		{"~> 1.0.7", ""},
-	}
-
-	for _, tc := range cases {
-		c, err := NewConstraint(tc.constraint)
-		if err != nil {
-			t.Fatalf("err: %s", err)
-		}
-
-		actual := c.String()
-		expected := tc.result
-		if expected == "" {
-			expected = tc.constraint
-		}
-
-		if actual != expected {
-			t.Fatalf("Constraint: %s\nExpected: %#v\nActual: %s",
-				tc.constraint, expected, actual)
-		}
-	}
-}
diff -upNr ../gox-1.0.1/vendor/github.com/hashicorp/go-version/version.go vendor/github.com/hashicorp/go-version/version.go
--- ../gox-1.0.1/vendor/github.com/hashicorp/go-version/version.go	2019-04-10 23:02:03.000000000 +0800
+++ vendor/github.com/hashicorp/go-version/version.go	2022-10-06 15:56:59.000000000 +0800
@@ -15,7 +15,7 @@ var versionRegexp *regexp.Regexp
 // The raw regular expression string used for testing the validity
 // of a version.
 const VersionRegexpRaw string = `v?([0-9]+(\.[0-9]+)*?)` +
-	`(-?([0-9A-Za-z\-~]+(\.[0-9A-Za-z\-~]+)*))?` +
+	`(-([0-9]+[0-9A-Za-z\-~]*(\.[0-9A-Za-z\-~]+)*)|(-?([A-Za-z\-~]+[0-9A-Za-z\-~]*(\.[0-9A-Za-z\-~]+)*)))?` +
 	`(\+([0-9A-Za-z\-~]+(\.[0-9A-Za-z\-~]+)*))?` +
 	`?`

@@ -25,6 +25,7 @@ type Version struct {
 	pre      string
 	segments []int64
 	si       int
+	original string
 }

 func init() {
@@ -59,11 +60,17 @@ func NewVersion(v string) (*Version, err
 		segments = append(segments, 0)
 	}

+	pre := matches[7]
+	if pre == "" {
+		pre = matches[4]
+	}
+
 	return &Version{
-		metadata: matches[7],
-		pre:      matches[4],
+		metadata: matches[10],
+		pre:      pre,
 		segments: segments,
 		si:       si,
+		original: v,
 	}, nil
 }

@@ -301,11 +308,19 @@ func (v *Version) Segments() []int {
 // for a version "1.2.3-beta", segments will return a slice of
 // 1, 2, 3.
 func (v *Version) Segments64() []int64 {
-	return v.segments
+	result := make([]int64, len(v.segments))
+	copy(result, v.segments)
+	return result
 }

 // String returns the full version string included pre-release
 // and metadata information.
+//
+// This value is rebuilt according to the parsed segments and other
+// information. Therefore, ambiguities in the version string such as
+// prefixed zeroes (1.04.0 => 1.4.0), `v` prefix (v1.0.0 => 1.0.0), and
+// missing parts (1.0 => 1.0.0) will be made into a canonicalized form
+// as shown in the parenthesized examples.
 func (v *Version) String() string {
 	var buf bytes.Buffer
 	fmtParts := make([]string, len(v.segments))
@@ -324,3 +339,9 @@ func (v *Version) String() string {

 	return buf.String()
 }
+
+// Original returns the original parsed version as-is, including any
+// potential whitespace, `v` prefix, etc.
+func (v *Version) Original() string {
+	return v.original
+}
diff -upNr ../gox-1.0.1/vendor/github.com/hashicorp/go-version/version_collection_test.go vendor/github.com/hashicorp/go-version/version_collection_test.go
--- ../gox-1.0.1/vendor/github.com/hashicorp/go-version/version_collection_test.go	2019-04-10 23:02:03.000000000 +0800
+++ vendor/github.com/hashicorp/go-version/version_collection_test.go	1970-01-01 08:00:00.000000000 +0800
@@ -1,46 +0,0 @@
-package version
-
-import (
-	"reflect"
-	"sort"
-	"testing"
-)
-
-func TestCollection(t *testing.T) {
-	versionsRaw := []string{
-		"1.1.1",
-		"1.0",
-		"1.2",
-		"2",
-		"0.7.1",
-	}
-
-	versions := make([]*Version, len(versionsRaw))
-	for i, raw := range versionsRaw {
-		v, err := NewVersion(raw)
-		if err != nil {
-			t.Fatalf("err: %s", err)
-		}
-
-		versions[i] = v
-	}
-
-	sort.Sort(Collection(versions))
-
-	actual := make([]string, len(versions))
-	for i, v := range versions {
-		actual[i] = v.String()
-	}
-
-	expected := []string{
-		"0.7.1",
-		"1.0.0",
-		"1.1.1",
-		"1.2.0",
-		"2.0.0",
-	}
-
-	if !reflect.DeepEqual(actual, expected) {
-		t.Fatalf("bad: %#v", actual)
-	}
-}
diff -upNr ../gox-1.0.1/vendor/github.com/hashicorp/go-version/version_test.go vendor/github.com/hashicorp/go-version/version_test.go
--- ../gox-1.0.1/vendor/github.com/hashicorp/go-version/version_test.go	2019-04-10 23:02:03.000000000 +0800
+++ vendor/github.com/hashicorp/go-version/version_test.go	1970-01-01 08:00:00.000000000 +0800
@@ -1,265 +0,0 @@
-package version
-
-import (
-	"reflect"
-	"testing"
-)
-
-func TestNewVersion(t *testing.T) {
-	cases := []struct {
-		version string
-		err     bool
-	}{
-		{"1.2.3", false},
-		{"1.0", false},
-		{"1", false},
-		{"1.2.beta", true},
-		{"foo", true},
-		{"1.2-5", false},
-		{"1.2-beta.5", false},
-		{"\n1.2", true},
-		{"1.2.0-x.Y.0+metadata", false},
-		{"1.2.0-x.Y.0+metadata-width-hypen", false},
-		{"1.2.3-rc1-with-hypen", false},
-		{"1.2.3.4", false},
-		{"1.2.0.4-x.Y.0+metadata", false},
-		{"1.2.0.4-x.Y.0+metadata-width-hypen", false},
-		{"1.2.0-X-1.2.0+metadata~dist", false},
-		{"1.2.3.4-rc1-with-hypen", false},
-		{"1.2.3.4", false},
-		{"v1.2.3", false},
-		{"foo1.2.3", true},
-		{"1.7rc2", false},
-		{"v1.7rc2", false},
-	}
-
-	for _, tc := range cases {
-		_, err := NewVersion(tc.version)
-		if tc.err && err == nil {
-			t.Fatalf("expected error for version: %s", tc.version)
-		} else if !tc.err && err != nil {
-			t.Fatalf("error for version %s: %s", tc.version, err)
-		}
-	}
-}
-
-func TestVersionCompare(t *testing.T) {
-	cases := []struct {
-		v1       string
-		v2       string
-		expected int
-	}{
-		{"1.2.3", "1.4.5", -1},
-		{"1.2-beta", "1.2-beta", 0},
-		{"1.2", "1.1.4", 1},
-		{"1.2", "1.2-beta", 1},
-		{"1.2+foo", "1.2+beta", 0},
-		{"v1.2", "v1.2-beta", 1},
-		{"v1.2+foo", "v1.2+beta", 0},
-		{"v1.2.3.4", "v1.2.3.4", 0},
-		{"v1.2.0.0", "v1.2", 0},
-		{"v1.2.0.0.1", "v1.2", 1},
-		{"v1.2", "v1.2.0.0", 0},
-		{"v1.2", "v1.2.0.0.1", -1},
-		{"v1.2.0.0", "v1.2.0.0.1", -1},
-		{"v1.2.3.0", "v1.2.3.4", -1},
-		{"1.7rc2", "1.7rc1", 1},
-		{"1.7rc2", "1.7", -1},
-		{"1.2.0", "1.2.0-X-1.2.0+metadata~dist", 1},
-	}
-
-	for _, tc := range cases {
-		v1, err := NewVersion(tc.v1)
-		if err != nil {
-			t.Fatalf("err: %s", err)
-		}
-
-		v2, err := NewVersion(tc.v2)
-		if err != nil {
-			t.Fatalf("err: %s", err)
-		}
-
-		actual := v1.Compare(v2)
-		expected := tc.expected
-		if actual != expected {
-			t.Fatalf(
-				"%s <=> %s\nexpected: %d\nactual: %d",
-				tc.v1, tc.v2,
-				expected, actual)
-		}
-	}
-}
-
-func TestComparePreReleases(t *testing.T) {
-	cases := []struct {
-		v1       string
-		v2       string
-		expected int
-	}{
-		{"1.2-beta.2", "1.2-beta.2", 0},
-		{"1.2-beta.1", "1.2-beta.2", -1},
-		{"1.2-beta.2", "1.2-beta.11", -1},
-		{"3.2-alpha.1", "3.2-alpha", 1},
-		{"1.2-beta.2", "1.2-beta.1", 1},
-		{"1.2-beta.11", "1.2-beta.2", 1},
-		{"1.2-beta", "1.2-beta.3", -1},
-		{"1.2-alpha", "1.2-beta.3", -1},
-		{"1.2-beta", "1.2-alpha.3", 1},
-		{"3.0-alpha.3", "3.0-rc.1", -1},
-		{"3.0-alpha3", "3.0-rc1", -1},
-		{"3.0-alpha.1", "3.0-alpha.beta", -1},
-		{"5.4-alpha", "5.4-alpha.beta", 1},
-		{"v1.2-beta.2", "v1.2-beta.2", 0},
-		{"v1.2-beta.1", "v1.2-beta.2", -1},
-		{"v3.2-alpha.1", "v3.2-alpha", 1},
-		{"v3.2-rc.1-1-g123", "v3.2-rc.2", 1},
-	}
-
-	for _, tc := range cases {
-		v1, err := NewVersion(tc.v1)
-		if err != nil {
-			t.Fatalf("err: %s", err)
-		}
-
-		v2, err := NewVersion(tc.v2)
-		if err != nil {
-			t.Fatalf("err: %s", err)
-		}
-
-		actual := v1.Compare(v2)
-		expected := tc.expected
-		if actual != expected {
-			t.Fatalf(
-				"%s <=> %s\nexpected: %d\nactual: %d",
-				tc.v1, tc.v2,
-				expected, actual)
-		}
-	}
-}
-
-func TestVersionMetadata(t *testing.T) {
-	cases := []struct {
-		version  string
-		expected string
-	}{
-		{"1.2.3", ""},
-		{"1.2-beta", ""},
-		{"1.2.0-x.Y.0", ""},
-		{"1.2.0-x.Y.0+metadata", "metadata"},
-		{"1.2.0-metadata-1.2.0+metadata~dist", "metadata~dist"},
-	}
-
-	for _, tc := range cases {
-		v, err := NewVersion(tc.version)
-		if err != nil {
-			t.Fatalf("err: %s", err)
-		}
-
-		actual := v.Metadata()
-		expected := tc.expected
-		if actual != expected {
-			t.Fatalf("expected: %s\nactual: %s", expected, actual)
-		}
-	}
-}
-
-func TestVersionPrerelease(t *testing.T) {
-	cases := []struct {
-		version  string
-		expected string
-	}{
-		{"1.2.3", ""},
-		{"1.2-beta", "beta"},
-		{"1.2.0-x.Y.0", "x.Y.0"},
-		{"1.2.0-x.Y.0+metadata", "x.Y.0"},
-		{"1.2.0-metadata-1.2.0+metadata~dist", "metadata-1.2.0"},
-	}
-
-	for _, tc := range cases {
-		v, err := NewVersion(tc.version)
-		if err != nil {
-			t.Fatalf("err: %s", err)
-		}
-
-		actual := v.Prerelease()
-		expected := tc.expected
-		if actual != expected {
-			t.Fatalf("expected: %s\nactual: %s", expected, actual)
-		}
-	}
-}
-
-func TestVersionSegments(t *testing.T) {
-	cases := []struct {
-		version  string
-		expected []int
-	}{
-		{"1.2.3", []int{1, 2, 3}},
-		{"1.2-beta", []int{1, 2, 0}},
-		{"1-x.Y.0", []int{1, 0, 0}},
-		{"1.2.0-x.Y.0+metadata", []int{1, 2, 0}},
-		{"1.2.0-metadata-1.2.0+metadata~dist", []int{1, 2, 0}},
-	}
-
-	for _, tc := range cases {
-		v, err := NewVersion(tc.version)
-		if err != nil {
-			t.Fatalf("err: %s", err)
-		}
-
-		actual := v.Segments()
-		expected := tc.expected
-		if !reflect.DeepEqual(actual, expected) {
-			t.Fatalf("expected: %#v\nactual: %#v", expected, actual)
-		}
-	}
-}
-
-func TestVersionSegments64(t *testing.T) {
-	cases := []struct {
-		version  string
-		expected []int64
-	}{
-		{"1.2.3", []int64{1, 2, 3}},
-		{"1.2-beta", []int64{1, 2, 0}},
-		{"1-x.Y.0", []int64{1, 0, 0}},
-		{"1.2.0-x.Y.0+metadata", []int64{1, 2, 0}},
-		{"1.4.9223372036854775807", []int64{1, 4, 9223372036854775807}},
-	}
-
-	for _, tc := range cases {
-		v, err := NewVersion(tc.version)
-		if err != nil {
-			t.Fatalf("err: %s", err)
-		}
-
-		actual := v.Segments64()
-		expected := tc.expected
-		if !reflect.DeepEqual(actual, expected) {
-			t.Fatalf("expected: %#v\nactual: %#v", expected, actual)
-		}
-	}
-}
-
-func TestVersionString(t *testing.T) {
-	cases := [][]string{
-		{"1.2.3", "1.2.3"},
-		{"1.2-beta", "1.2.0-beta"},
-		{"1.2.0-x.Y.0", "1.2.0-x.Y.0"},
-		{"1.2.0-x.Y.0+metadata", "1.2.0-x.Y.0+metadata"},
-		{"1.2.0-metadata-1.2.0+metadata~dist", "1.2.0-metadata-1.2.0+metadata~dist"},
-	}
-
-	for _, tc := range cases {
-		v, err := NewVersion(tc[0])
-		if err != nil {
-			t.Fatalf("err: %s", err)
-		}
-
-		actual := v.String()
-		expected := tc[1]
-		if actual != expected {
-			t.Fatalf("expected: %s\nactual: %s", expected, actual)
-		}
-	}
-}
diff -upNr ../gox-1.0.1/vendor/github.com/mitchellh/iochan/iochan_test.go vendor/github.com/mitchellh/iochan/iochan_test.go
--- ../gox-1.0.1/vendor/github.com/mitchellh/iochan/iochan_test.go	2019-04-10 23:02:03.000000000 +0800
+++ vendor/github.com/mitchellh/iochan/iochan_test.go	1970-01-01 08:00:00.000000000 +0800
@@ -1,24 +0,0 @@
-package iochan
-
-import (
-	"bytes"
-	"reflect"
-	"testing"
-)
-
-func TestDelimReader(t *testing.T) {
-	buf := new(bytes.Buffer)
-	buf.WriteString("foo\nbar\nbaz")
-
-	ch := DelimReader(buf, '\n')
-
-	results := make([]string, 0, 3)
-	expected := []string{"foo\n", "bar\n", "baz"}
-	for v := range ch {
-		results = append(results, v)
-	}
-
-	if !reflect.DeepEqual(results, expected) {
-		t.Fatalf("unexpected results: %#v", results)
-	}
-}
diff -upNr ../gox-1.0.1/vendor/modules.txt vendor/modules.txt
--- ../gox-1.0.1/vendor/modules.txt	1970-01-01 08:00:00.000000000 +0800
+++ vendor/modules.txt	2022-10-06 15:56:59.000000000 +0800
@@ -0,0 +1,6 @@
+# github.com/hashicorp/go-version v1.0.0
+## explicit
+github.com/hashicorp/go-version
+# github.com/mitchellh/iochan v1.0.0
+## explicit
+github.com/mitchellh/iochan
diff -upNr ../gox-1.0.1/vendor/vendor.json vendor/vendor.json
--- ../gox-1.0.1/vendor/vendor.json	2019-04-10 23:02:03.000000000 +0800
+++ vendor/vendor.json	1970-01-01 08:00:00.000000000 +0800
@@ -1,19 +0,0 @@
-{
-	"comment": "",
-	"ignore": "",
-	"package": [
-		{
-			"checksumSHA1": "3xP5/nFAqTJCKmOIPKv4GadUQb4=",
-			"path": "github.com/hashicorp/go-version",
-			"revision": "4fe82ae3040f80a03d04d2cccb5606a626b8e1ee",
-			"revisionTime": "2017-11-29T15:08:20Z"
-		},
-		{
-			"checksumSHA1": "tIQCd3YGbEvxr9j2pFS8LCHt9nY=",
-			"path": "github.com/mitchellh/gox",
-			"revision": "0d65d8b8c2d1ebc3355877aec37060bee0a2f9fe",
-			"revisionTime": "2018-01-03T15:26:19Z"
-		}
-	],
-	"rootPath": "github.com/mitchellh/gox"
-}